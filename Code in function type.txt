import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
import matplotlib.pyplot as plt

def load_and_preprocess_data(file_path):

    data = pd.read_csv(file_path)
    
    # Handle missing values
    data['Cities'] = data['Cities'].dropna()
    data['Weather'] = data['Weather'].fillna(data['Weather'].mode()[0])
    data['Traffic_Level'] = data['Traffic_Level'].fillna(data['Traffic_Level'].mode()[0])

    # Encode categorical variables
    le = LabelEncoder()
    data['City'] = le.fit_transform(data['Cities'])
    data['weather'] = le.fit_transform(data['Weather'])
    data['Traffic'] = le.fit_transform(data['Traffic_Level'])
    data['Time'] = le.fit_transform(data['Delivery_Time_min'])

    return data, le

def train_decision_tree(data):
   
    X = data[['City', 'weather', 'Traffic']]
    y = data['Time']

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train the model
    model = DecisionTreeRegressor(random_state=42)
    model.fit(X_train, y_train)

    # Make predictions
    y_pred = model.predict(X_test)

    return model, X_test, y_test, y_pred

def evaluate_model(y_test, y_pred):
  
    mae = mean_absolute_error(y_test, y_pred)
    rmae = np.sqrt(mae)
    r2 = r2_score(y_test, y_pred)

    return {'MAE': mae, 'RMAE': rmae, 'R2_Score': r2}

def plot_predictions(y_test, y_pred):
    
    plt.figure(figsize=(8, 6))
    plt.scatter(y_test, y_pred, color='blue', alpha=0.6)
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', lw=2)
    plt.xlabel('Actual Delivery Time')
    plt.ylabel('Predicted Delivery Time')
    plt.title('Predicted vs Actual Delivery Time')
    plt.show()

def save_results(X_test, y_test, y_pred, output_file):
   
    results = X_test.copy()
    results['Actual_Time'] = y_test.values
    results['Predicted_Time'] = y_pred
    results.to_csv(output_file, index=False)

def city_average_times(data):
  
    return data.groupby('Cities')['Time'].mean()

def main():
    # File path to the CSV
    file_path = "file_path.csv"

    # Preprocess the data
    data, le = load_and_preprocess_data(file_path)

    # Train the model
    model, X_test, y_test, y_pred = train_decision_tree(data)

    # Evaluate the model
    metrics = evaluate_model(y_test, y_pred)
    print("Evaluation Metrics:", metrics)

    # Plot predictions
    plot_predictions(y_test, y_pred)

    # Save results to CSV
    output_file = "FoodDelivery_Times.csv"
    save_results(X_test, y_test, y_pred, output_file)

    # Calculate and print average delivery times per city
    averages = city_average_times(data)
    print("Average delivery times per city:\n", averages)

if __name__ == "__main__":
    main()
